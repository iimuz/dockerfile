[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'HerringtonDarkholme/yats.vim'
on_ft = ['typescript', 'typescript.tsx']

[[plugins]]
repo = 'jmcantrell/vim-virtualenv'
on_ft = ['python']

[[plugins]]
repo = 'moll/vim-node'
on_ft = ['javascript']

[[plugins]]
repo = 'mxw/vim-jsx'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'pangloss/vim-javascript'
on_ft = ['javascript', 'javascript.jsx']

[[plugins]]
repo = 'plasticboy/vim-markdown'
on_ft = ['markdown', 'mkd']
hook_post_update = '''
  make install
'''
hook_source = '''
  let g:vim_markdown_folding_disabled = 1
  let g:vim_markdown_folding_level = 6
  let g:vim_markdown_no_default_key_mappings = 1
  let g:vim_markdown_toc_autofit = 1
  let g:vim_markdown_conceal = 1
  let g:vim_markdown_fenced_languages = [
    \ 'ini=dosini'
  \ ]
  let g:vim_markdown_math = 1
  let g:vim_markdown_frontmatter = 1
  let g:vim_markdown_toml_frontmatter = 1
  let g:vim_markdown_json_frontmatter = 1
  let g:vim_markdown_strikethrough = 1
  let g:vim_markdown_new_list_item_indent = 2
'''
hook_add = '''
  " Prefix key
  nnoremap [markdown] <Nop>
  nmap <Space>m [markdown]

  nmap <silent> [markdown]n <Plug>Markdown_MoveToNextHeader
  nmap <silent> [markdown]p <Plug>Markdown_MoveToPreviousHeader
  nmap <silent> [markdown]c <Plug>Markdown_MoveToCurHeader
  nmap <silent> [markdown]u <Plug>Markdown_MoveToParentHeader
  nmap <silent> [markdown]v :<C-u>Tocv<CR>
  nmap <silent> [markdown]h :<C-u>Toch<CR>
'''

[[plugins]]
repo = 'posva/vim-vue'
on_ft = ['vue']

[[plugins]]
repo = 'Shougo/deoplete.nvim'
on_i = 1
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#enable_smart_case = 1
  let g:deoplete#disable_auto_complete = 1
  " inoremap <expr> <C-n> pumvisible() ? "\<C-n>" : deoplete#mappings#manual_complete()
  if !exists('g:deoplete#omni#input_patterns')
    let g:deoplete#omni#input_patterns = {}
  endif
  autocmd InsertLeave,CompleteDone * if pumvisible() == 0 | pclose | endif
'''

[[plugins]]
repo = 'w0rp/ale'
on_ft = ['javascript', 'javascript.jsx', 'typescript', 'typescript.tsx', 'vue']
hook_source = '''
  " エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
  let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
  " エラー表示の列を常時表示
  let g:ale_sign_column_always = 1
  " ファイルを開いたときにlint実行
  let g:ale_lint_on_enter = 1
  " ファイルを保存したときにlint実行
  let g:ale_lint_on_save = 1
  " 編集中のlintはしない
  let g:ale_lint_on_text_changed = 'never'
  " lint結果をロケーションリストとQuickFixには表示しない
  let g:ale_set_loclist = 0
  let g:ale_set_quickfix = 0
  let g:ale_open_list = 0
  let g:ale_keep_list_window_open = 0
'''
hook_add = '''
  " Prefix key
  nmap [ale] <Nop>
  map <Space>a [ale]
  " エラー行にジャンプ
  nmap <silent> [ale]p <Plug>(ale_previous)
  nmap <silent> [ale]n <Plug>(ale_next)
  nmap <silent> [ale]f :<C-u>ALEFix<CR>
'''

[[plugins]]
repo = 'zchee/deoplete-go'
on_ft = 'go'

