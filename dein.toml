[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]]
repo = 'Shougo/unite.vim'
depends = ['vimproc']
hook_add = '''
  let g:unite_enable_start_insert = 0
  let g:unite_enable_ignore_case = 1
  let g:unite_enable_smart_case = 1
  let g:unite_split_rule = 'botright'

  nnoremap [unite] <Nop>
  nmap <Space>u [unite]
  nnoremap <silent> [unite]f :Unite -vertical -winwidth=40 file_rec/git<CR>
  nnoremap <silent> [unite]g :Unite -vertical -winwidth=40 grep:.<CR>
'''

[[plugins]]
repo = 'Shougo/unite-outline'
depends = ['unite']
hook_add = '''
  nnoremap <silent> [unite]o :Unite outline<CR>
'''

[[plugins]]
repo = 'Shougo/vimproc.vim'
hook_post_update = '''
  let g:dein#plugin.build = 'make CC=gcc'
'''

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
  map <C-n> :NERDTreeToggle<CR>
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
depends = ['Shougo/neoinclude.vim', 'Shougo/context_filetype.vim']
on_i = 1
hook_add = '''
  let g:neocomplete#enable_at_startup = 1

  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {} 
  endif

  let g:neocomplete#force_overwrite_completefunc = 1
  let g:neocomplete#force_omni_input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)\w*'
  let g:neocomplete#force_omni_input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\w*\|\h\w*::\w*'
'''

[[plugins]]
repo = 'Shougo/neoinclude.vim'

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repository = 'justmao945/vim-clang'
on_ft = ['c', 'cpp']
hook_add = '''
  " disable auto completion for vim-clang
  let g:clang_auto = 0
  " default 'longest' can not work with neocomplete
  let g:clang_c_completeopt   = 'menuone'
  let g:clang_cpp_completeopt = 'menuone'

  function! s:get_latest_clang(search_path)
    let l:filelist = split(globpath(a:search_path, 'clang-*'), '\n')
    let l:clang_exec_list = []
    for l:file in l:filelist
      if l:file =~ '^.*clang-\d\.\d$'
        call add(l:clang_exec_list, l:file)
      endif
    endfor
    if len(l:clang_exec_list)
      return reverse(l:clang_exec_list)[0]
    else
      return 'clang'
    endif
  endfunction

  function! s:get_latest_clang_format(search_path)
    let l:filelist = split(globpath(a:search_path, 'clang-format-*'), '\n')
    let l:clang_exec_list = []
    for l:file in l:filelist
      if l:file =~ '^.*clang-format-\d\.\d$'
        call add(l:clang_exec_list, l:file)
      endif
    endfor
    if len(l:clang_exec_list)
      return reverse(l:clang_exec_list)[0]
    else
      return 'clang-format'
    endif
  endfunction

  let g:clang_exec = s:get_latest_clang('/usr/bin')
  let g:clang_format_exec = s:get_latest_clang_format('/usr/bin')

  let g:clang_c_options = '-std=c11'
  let g:clang_cpp_options = '-std=c++11 -stdlib=libc++'
'''

